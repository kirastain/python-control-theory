def deter(matrix):
    det = 0
    l = len(matrix)
    if len(matrix) == 2:
        det = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]
        return(det)

    for i in range(l):
        temp = 1
        k = i
        for j in range(l):
            temp *= matrix[j][k]
            k = 0 if k == l - 1 else k + 1  # asdfgghjj
        det += temp

    for i in range(l):
        temp = 1
        k = i
        for j in range(l):
            temp *= matrix[j][k]
            k = l - 1 if k == 0 else k - 1
        det -= temp
    return det

def matmult(mat1, mat2):
    temp = []
    res = []
    sum = 0
    r1 = len(mat1)
    c1 = len(mat1[0])
    r2 = c1
    c2 = len(mat2[0])
    for x in range(0, r1):
        for j in range(0, c2):
            for i in range(0, c1):
                sum = sum + mat1[x][i] * mat2[i][j]
            temp.append(sum)
            sum = 0
        res.append(temp)
        temp = [] #all hail numpy
    return res

def neospower(matrix, n):
    if n ==1:
        return matrix
    else:
        res = matrix
        for i in range(n-1):
            res = matmult(matrix, matrix)
        return res
def transp(m):
    m[0][1], m[1][0] = m[1][0], m[0][1]
    m[0][2], m[2][0] = m[2][0], m[0][2]
    m[1][2], m[2][1] = m[2][1], m[1][2]

def matrank(matrix):
    det = deter(matrix)
    if det != 0:
        return 3
    else:
        temp = [[matrix[0][0], matrix[0][1]], [matrix[1][0], matrix[1][1]]]
        det = deter(temp)
        if det != 0:
            return 2
        else:
            temp = [[matrix[0][1], matrix[0][2]], [matrix[1][1], matrix[1][2]]]
            det = deter(temp)
            if det != 0:
                return 2
            else:
                temp = [[matrix[1][0], matrix[1][1]], [matrix[2][0], matrix[1][1]]]
                det = deter(temp)
                if det != 0:
                    return 2
                else:
                    temp = [[matrix[1][1], matrix[1][2]], [matrix[2][1], matrix[2][2]]]
                    det = deter(temp)
                    if det != 0:
                        return 2
                    else:
                        return 1

def matupr(a, b):
    upr = [[b[0][0],b[1][0],b[2][0]]]
    temp = matmult(a, b)
    add = [[temp[0][0],temp[1][0],temp[2][0]]]
    upr.append(add[0])
    a = neospower(a, 2)
    temp = matmult(a, b)
    add = [[temp[0][0], temp[1][0], temp[2][0]]]
    upr.append(add[0])
    transp(upr)
    print(upr)
    return upr


def matcheckupr(a, b):
    upr = matupr(a, b)
    det = deter(upr)
    if det != 0:
        print('Система является управляемой')
        answer = 'Система является управляемой\n\n'
        return answer
    else:
        print('Система не является управляемой')
        answer = 'Система не является управляемой\n\n'
        return answer




def matnabl(a,c):
    nabl = c
    temp = matmult(c, a)
    nabl.append(temp[0])
    a2 = neospower(a, 2)
    temp = matmult(c, a2)
    nabl.append(temp[0])
    nabl1 = nabl[0:3]
    print(nabl1)
    return nabl1
def matchecknabl(a, c):
    nabl = matnabl(a, c)
    det = deter(nabl)
    if det != 0:
        print('Система является наблюдаемой')
        answer = 'Система является наблюдаемой\n\n\n'
        return answer
    else:
        print('Система не является наблюдаемой')
        answer = 'Система не является наблюдаемой\n\n\n'
        return answer
